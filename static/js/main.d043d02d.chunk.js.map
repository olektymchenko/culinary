{"version":3,"sources":["img/utensils-solid.svg","Header.js","Buttons.js","randomReciept/RandomChooseOption.js","RecieptByIngridient/IngridientChooseOption.js","randomReciept/ListOfRecipies.js","Culinary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","Logo","alt","Buttons","props","onClick","randomOption","indridientOption","type","placeholder","value","numerOfReciepts","onChange","e","change","RandomChooseOption","addTag","id","getData","IngridientChooseOption","addIngridients","getData1","ListOfRecipies","receiptArray","data","map","element","index","key","image","title","dangerouslySetInnerHTML","__html","summary","instructions","readyInMinutes","servings","API_KEY","Culinary","changeNumberOfRecipets","preventDefault","setState","numberOfRecipiepts","target","showRandomOption","state","isClickedRandom","isClickedIngridient","showIngridientOption","addTagsAndRecipies","tag","tags","length","prevState","addTags","ingridients","getRandomRecipts","newRecipts","fetch","toString","then","json","recipiept","i","recipes","currectRecipiept","push","recipesArray","getIntridientRecipts","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d043d02d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/utensils-solid.4dd1c615.svg\";","import React from 'react';\r\nimport Logo from './img/utensils-solid.svg';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div className=\"headerLogo\">\r\n            <div><img src={Logo} alt=\"Logo\"></img></div>\r\n            <div><span>CulinaryHelper</span></div>\r\n        </div>\r\n    );\r\n};\r\nexport default Header;","import React from 'react';\r\nimport './Buttons.css';\r\n\r\nconst Buttons = (props) => {\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n            <button onClick={props.randomOption}>Get Random Recipes</button>\r\n            <button onClick={props.indridientOption}>Get Idea by Ingridients</button>\r\n            <input className='enterAmount' type=\"number\" placeholder=\"Enter amount of Recipes\" value={props.numerOfReciepts} onChange={(e) => props.change(e, \"value\")}></input>\r\n        </div>\r\n    );\r\n}\r\nexport default Buttons;","import React from 'react';\r\nimport \"./RandomeChooseOptions.css\"\r\n\r\nconst RandomChooseOption = (props) => {\r\n    return (\r\n        <div>\r\n            <h4>Please, select your preferentions:</h4>\r\n            <button value=\"vegetarian\" onClick={(e) => props.addTag(e, \"value\")}>Vegetarian</button>\r\n            <button value=\"vegan\" onClick={(e) => props.addTag(e, 'value')}>Vegan</button>\r\n            <button value=\"glutenFree\" onClick={(e) => props.addTag(e, 'value')}>Gluten Free</button>\r\n            <button value=\"dairyFree\" onClick={(e) => props.addTag(e, 'value')}>Dairy Free</button>\r\n            <h4>Please, select meal type:</h4>\r\n            <button value=\"breakfast\" onClick={(e) => props.addTag(e, 'value')}>Breakfast</button>\r\n            <button value=\"soup\" onClick={(e) => props.addTag(e, 'value')}>Soup</button>\r\n            <button value=\"main course\" onClick={(e) => props.addTag(e, \"value\")}>Main Course</button>\r\n            <button value=\"salad\" onClick={(e) => props.addTag(e, 'value')}>Salad</button>\r\n            <button value=\"dessert\" onClick={(e) => props.addTag(e, 'value')}>Dessert</button>\r\n            <button id=\"getRandomRecipts\" onClick={props.getData}>Get Recipts!</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RandomChooseOption;","import React from 'react';\r\nimport './IngridientChooseOption.css'\r\nconst IngridientChooseOption = (props) => {\r\n    return (\r\n        <div className=\"IngridOption\">\r\n            <textarea onChange={props.addIngridients} placeholder=\"Enter ingridients, for example: eggs,butter,becon,pasta IMPORTANT enter ingridients ony by one using comma\"></textarea>\r\n            <button id=\"getRandomRecipts\" onClick={props.getData1}>Get ideas!</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default IngridientChooseOption;","import React from 'react';\r\nimport \"./ListOfRecipies.css\"\r\n\r\nconst ListOfRecipies = (props) => {\r\n    let receiptArray = props.data.map((element, index) => {\r\n        return (\r\n            <div className=\"ReceiptItem\" key={index}>\r\n                <img src={element.image} alt={index} /><br></br>\r\n                <h2>{element.title}</h2><br></br>\r\n                <div dangerouslySetInnerHTML={{ __html: element.summary }}></div>\r\n                <div dangerouslySetInnerHTML={{ __html: element.instructions }}></div>\r\n                <div>{element.readyInMinutes && <h3>Time for preparing: {element.readyInMinutes}</h3>}<br></br></div>\r\n                <div>{element.servings && <h3>Amount of portions: {element.servings}</h3>}</div><br></br>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"ReceiptsBlock\">\r\n            {receiptArray}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default ListOfRecipies;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Buttons from './Buttons';\r\nimport RandomChooseOption from './randomReciept/RandomChooseOption'\r\nimport IngridientChooseOption from './RecieptByIngridient/IngridientChooseOption';\r\nimport ListOfRecipies from './randomReciept/ListOfRecipies';\r\n\r\nconst API_KEY = \"223b603b9397489bb403ef40ee0499ac\";\r\n\r\nclass Culinary extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            recipesArray: [],\r\n            tags: [],\r\n            ingridients: \"\",\r\n            numberOfRecipiepts: '',\r\n            isClickedRandom: false,\r\n            isClickedIngridient: false\r\n        }\r\n    }\r\n\r\n    changeNumberOfRecipets = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ numberOfRecipiepts: e.target.value })\r\n    }\r\n\r\n\r\n    showRandomOption = () => {\r\n        if (this.state.isClickedRandom) {\r\n            this.setState({ isClickedRandom: false });\r\n        }\r\n        else {\r\n            this.setState({ isClickedRandom: true });\r\n            this.setState({ isClickedIngridient: false });\r\n        }\r\n    }\r\n    showIngridientOption = () => {\r\n        if (this.state.isClickedIngridient) {\r\n            this.setState({ isClickedIngridient: false });\r\n        }\r\n        else {\r\n            this.setState({ isClickedIngridient: true });\r\n            this.setState({ isClickedRandom: false });\r\n        }\r\n    }\r\n\r\n\r\n    addTagsAndRecipies = (e) => {\r\n        let tag = e.target.value;\r\n        if (this.state.tags.length === 0) {\r\n            this.setState(prevState => ({ tags: prevState.tags + tag }))\r\n        }\r\n        else {\r\n            this.setState(prevState => ({ tags: prevState.tags + \",\" + tag }))\r\n        }\r\n\r\n    }\r\n    addTags = (e) => {\r\n        let tag = e.target.value;\r\n        if (this.state.tags.length === 0) {\r\n            this.setState(prevState => ({ tags: prevState.tags + tag }))\r\n        }\r\n        else {\r\n            this.setState(prevState => ({ tags: prevState.tags + \",\" + tag }))\r\n        }\r\n    }\r\n    addIngridients = (e) => {\r\n        this.setState({ ingridients: e.target.value })\r\n    }\r\n\r\n    getRandomRecipts = () => {\r\n        let newRecipts = [];\r\n        fetch(`https://api.spoonacular.com/recipes/random?number=${this.state.numberOfRecipiepts}&tags=${this.state.tags.toString()}&apiKey=${API_KEY}`).then(data => data.json()).then(recipiept => {\r\n            for (let i = 0; i < recipiept.recipes.length; i++) {\r\n                let currectRecipiept = {};\r\n                currectRecipiept.image = recipiept.recipes[i].image;\r\n                currectRecipiept.title = recipiept.recipes[i].title;\r\n                currectRecipiept.readyInMinutes = recipiept.recipes[i].readyInMinutes;\r\n                currectRecipiept.servings = recipiept.recipes[i].servings;\r\n                currectRecipiept.summary = recipiept.recipes[i].summary;\r\n                currectRecipiept.instructions = recipiept.recipes[i].instructions;\r\n                newRecipts.push(currectRecipiept);\r\n            }\r\n            this.setState({ recipesArray: newRecipts })\r\n        })\r\n    }\r\n\r\n    getIntridientRecipts = () => {\r\n        let newRecipts = [];\r\n        fetch(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${this.state.ingridients}&number=${this.state.numberOfRecipiepts}&ranking=1&apiKey=${API_KEY}`).then(data => data.json()).then(recipiept => {\r\n            console.log(recipiept);\r\n            for (let i = 0; i < recipiept.length; i++) {\r\n                let currectRecipiept = {};\r\n                currectRecipiept.image = recipiept[i].image;\r\n                currectRecipiept.title = recipiept[i].title;\r\n                currectRecipiept.readyInMinutes = recipiept[i].readyInMinutes;\r\n                currectRecipiept.servings = recipiept[i].servings;\r\n                currectRecipiept.summary = recipiept[i].summary;\r\n                currectRecipiept.instructions = recipiept[i].instructions;\r\n                newRecipts.push(currectRecipiept);\r\n            }\r\n            this.setState({ recipesArray: newRecipts })\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n\r\n                <Buttons randomOption={this.showRandomOption} indridientOption={this.showIngridientOption} numerOfReciepts={this.state.numberOfRecipiepts} change={this.changeNumberOfRecipets} />\r\n                {this.state.isClickedRandom && <RandomChooseOption addTag={this.addTags} getData={this.getRandomRecipts} />}\r\n\r\n                {this.state.isClickedIngridient && <IngridientChooseOption addIngridients={this.addIngridients} getData1={this.getIntridientRecipts} />}\r\n                <ListOfRecipies data={this.state.recipesArray} />\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Culinary;","import React from 'react';\nimport Culinary from './Culinary';\n\nfunction App() {\n  return (\n    <Culinary />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}